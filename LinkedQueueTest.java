import java.util.ArrayList;import java.util.List;public class LinkedQueueTest {	public static void main(String[] args) {		// create a queue to manage ArrayList objects		LinkedQueue myQueue = new LinkedQueue();		// what happens when isEmpty() is called on a queue that is empty?		System.out.println("\nInitially, isEmpty() returns " + myQueue.isEmpty());		System.out.println("\nQueue size: " + myQueue.size());		// add ArrayList objects to queue now		ArrayList<Integer> arr1 = new ArrayList<Integer>(3);		arr1.add(1);		arr1.add(2);		arr1.add(3);		myQueue.enQueue(arr1);		System.out.println("\nQueue size: " + myQueue.size());		// get the first element		System.out.println("\nThe first element in the queue: " + myQueue.nthElement(1));		System.out.println("\nElement no: " + myQueue.size() + " in the queue is: " + myQueue.nthElement(myQueue.size()));		ArrayList<Integer> arr2 = new ArrayList<Integer>(3);		arr2.add(4);		arr2.add(5);		arr2.add(6);		myQueue.enQueue(arr2);		System.out.println("\nQueue size: " + myQueue.size());		// get the first and second elements		System.out.println("\nThe first element in the queue: " + myQueue.nthElement(1));		System.out.println("\nThe second element in the queue: " + myQueue.nthElement(2));		System.out.println("\nElement no: " + myQueue.size() + " in the queue is: " + myQueue.nthElement(myQueue.size()));		ArrayList<Integer> arr3 = new ArrayList<Integer>(3);		arr3.add(7);		arr3.add(8);		arr3.add(9);		myQueue.enQueue(arr3);		System.out.println("\nQueue size: " + myQueue.size());		// get the first, second and third elements		System.out.println("\nThe first element in the queue: " + myQueue.nthElement(1));		System.out.println("\nThe second element in the queue: " + myQueue.nthElement(2));		System.out.println("\nThe third element in the queue: " + myQueue.nthElement(3));		System.out.println("\nElement no: " + myQueue.size() + " in the queue is: " + myQueue.nthElement(myQueue.size()));				// see if the queue is empty now		System.out.println("\nAfter adding some elements, isEmpty() returns " + myQueue.isEmpty());		while (!myQueue.isEmpty()) {			// get the element at the front of the queue			// without removing it from the queue			ArrayList frontElement = myQueue.getFront();			// print the element			System.out.println("\n" + frontElement + " is at the front of the queue.");						// now remove the front element from the queue			frontElement = myQueue.deQueue();			// print a message that the element has been removed from the queue			System.out.println(frontElement + " is removed from the queue.");			System.out.println("\nQueue size: " + myQueue.size());		}		// queue should be empty now		System.out.println("\nisEmpty() returns " + myQueue.isEmpty());	}  }