// use EmptyStackException (a class in the Java class library)// for raising an exception when peek() or pop() is performed on// an empty stackimport java.util.EmptyStackException;public class LinkedStack {	// stack size	private static int stkSize = 0;	// references the first node in the linked list	private Node topNode; 		// default constructor	public LinkedStack() {		topNode = null;	}		public void push(int newEntry) {		// create a new node, store value in its data field, and		// store previous topNode value in its next field		// in other words, newEntry node is always the very first node		topNode = new Node(newEntry, topNode);		// increment stack size		stkSize++;	} 	// return the data field value at the top of the stack, without	// removing the item from the stack 	public int peek() {		if (isEmpty())			throw new EmptyStackException();		else         return topNode.getData();	} 		// remove the top element of the stack and 	// return its data field value	public int pop() {		// save the data field of topNode in top variable		int topElement = peek();		// after removing the top data value, topNode is 		// the node that followed the previous topNode		topNode = topNode.getNextNode(); 		// decrement stack size		stkSize--;		return topElement;	}		// is the stack empty?	public boolean isEmpty() {		return topNode == null;	} 	// return the number elements in the stack	public int size(){		return stkSize;	}		// clear the stack	public void clear() {		stkSize = 0;		topNode = null;  	} 	// inner class private to LinkedStack class	private class Node {		// data field of Node		private int data;		// reference to the node that follows (this node)		private Node next; 		// two-parameter constructor		// @param data is the value to be stored in the new node		// @param next is the reference to an existing node, which 		// will follow the node that is being created		public Node(int data, Node next) {			this.data = data;			this.next = next;			}		// like a normal get method, returns the data field 		// of the node under consideration		public int getData() {			return data;		}		// change the data field value of the node under consideration		public void setData(int newData) {			data = newData;		}		// given a node, returns the reference to the node		// which follows the given node		public Node getNextNode() {			return next;		}		// given a node y (i.e., nextNode), make y		// as the node that follows the node under consideration		public void setNextNode(Node nextNode) {			next = nextNode;		}	} }