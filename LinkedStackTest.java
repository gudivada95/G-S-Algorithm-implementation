// class to test LinkedStack classpublic class LinkedStackTest {	public static void main(String[] args) {		LinkedStack myStack = new LinkedStack();		// what happens when isEmpty() is called on a stack that is empty?		System.out.println("\nInitially, isEmpty() returns " + myStack.isEmpty());		// add an element to stack		myStack.push(1);		System.out.println("\nStack size: " + myStack.size());		myStack.push(2);		System.out.println("\nStack size: " + myStack.size());		myStack.push(3);		System.out.println("\nStack size: " + myStack.size());				// see if the stack is empty now		System.out.println("\nAfter adding some elements, isEmpty() returns " + myStack.isEmpty());		while (!myStack.isEmpty()) {			// get the element at the top of the stack			// without removing it from the stack			int topElement = myStack.peek();			// print the value of the top element			System.out.println("\n" + topElement + " is at the top of the stack");						// now remove the top element from the stack			topElement = myStack.pop();			// print the value of the top element			System.out.println("\n" + topElement + " is the removed element");			// print stack size			System.out.println("\nStack size: " + myStack.size());		}		// stack should be empty now		System.out.println("\nisEmpty() returns " + myStack.isEmpty());		// push elements onto the stack		myStack.push(1);		// print stack size		System.out.println("\nStack size: " + myStack.size());		myStack.push(2);		// print stack size		System.out.println("\nStack size: " + myStack.size());		myStack.clear();		System.out.println("\nStack cleared!");		// print stack size		System.out.println("\nStack size: " + myStack.size());			}  }